DEBUG = 0
HAVE_VFS_FD := 1
CORE_DIR := .
BUILD_DIR := libretro-build

ifeq ($(platform),windows_x86)
   include $(BUILD_DIR)/Makefile.windows_x86
#else ifeq ($(platform),wii_ppc)
   #include $(BUILD_DIR)/Makefile.wii_ppc
else ifeq ($(platform),android_armeabi)
   include $(BUILD_DIR)/Makefile.android_armeabi
else ifeq ($(platform),android_arm64-v8a)
   include $(BUILD_DIR)/Makefile.android_arm64-v8a
else ifeq ($(platform),mingw_x86)
   include $(BUILD_DIR)/Makefile.mingw_x86
else ifeq ($(platform),mingw_x86_64)
   include $(BUILD_DIR)/Makefile.mingw_x86_64
else ifeq ($(platform),windows_x86_64)
   include $(BUILD_DIR)/Makefile.windows_x86_64
else ifeq ($(platform),linux_x86)
   include $(BUILD_DIR)/Makefile.linux_x86
else ifeq ($(platform),linux_x86_64)
   include $(BUILD_DIR)/Makefile.linux_x86_64
else ifeq ($(platform),android_armeabi-v7a)
   include $(BUILD_DIR)/Makefile.android_armeabi-v7a
else ifeq ($(platform),android_x86)
   include $(BUILD_DIR)/Makefile.android_x86
else ifeq ($(platform),android_mips64)
   include $(BUILD_DIR)/Makefile.android_mips64
else ifeq ($(platform),android_x86_64)
   include $(BUILD_DIR)/Makefile.android_x86_64
else ifeq ($(platform),linux-portable_x86)
   include $(BUILD_DIR)/Makefile.linux-portable_x86
else ifeq ($(platform),linux-portable_x86_64)
   include $(BUILD_DIR)/Makefile.linux-portable_x86_64
else ifeq ($(platform),android_mips)
   include $(BUILD_DIR)/Makefile.android_mips
else

# system platform
ifeq ($(platform),)
   platform = unix
   ifeq ($(shell uname -s),)
      EXE_EXT = .exe
      platform = win
   else ifneq ($(findstring MINGW,$(shell uname -s)),)
      platform = win
   else ifneq ($(findstring Darwin,$(shell uname -s)),)
      platform = osx
      ifeq ($(shell uname -p),powerpc)
         arch = ppc
      else
         arch = intel
      endif
   else ifneq ($(findstring win,$(shell uname -s)),)
      platform = win
   endif
else ifneq (,$(findstring armv,$(platform)))
	ifeq (,$(findstring classic_,$(platform)))
		override platform += unix
	endif
else ifneq (,$(findstring rpi3,$(platform)))
	override platform += unix
endif

prefix := /usr
libdir := $(prefix)/lib

LIBRETRO_DIR := libretro

TARGET_NAME := mgba

DEFINES :=

ifeq (,$(findstring msvc,$(platform)))
LIBS += -lm
endif

# GIT HASH
GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
   DEFINES += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

# Unix
ifneq (,$(findstring unix,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED := -shared -Wl,-version-script=link.T

   ifneq ($(findstring Haiku,$(shell uname -s)),)
	  # Haiku does not handle locales like Linux
      DEFINES += -std=c99 -D_GNU_SOURCE
   else
      DEFINES += -std=c99 -D_GNU_SOURCE -DHAVE_LOCALE
   endif

   # Raspberry Pi 3
   ifneq (,$(findstring rpi3,$(platform)))
      # Using NEON optimizations results in an instant crashing core
      PLATFORM_DEFINES += -marm -mcpu=cortex-a53 -mfloat-abi=hard
      CFLAGS += -fomit-frame-pointer -ffast-math
      HAVE_VFS_FD = 0
   endif
   
# (armv7 a7, hard point, neon based) ### 
# NESC, SNESC, C64 mini 
else ifeq ($(platform), classic_armv7_a7)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=link.T -Wl,--no-undefined
	CFLAGS += -Ofast \
	-flto=4 -fwhole-program -fuse-linker-plugin \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	CXXFLAGS += $(CFLAGS)
	CPPFLAGS += $(CFLAGS)
	ASFLAGS += $(CFLAGS)
	HAVE_NEON = 1
	ARCH = arm
	BUILTIN_GPU = neon
	HAVE_VFS_FD = 0
    DEFINES += -std=c99 -D_GNU_SOURCE
    DEFINES += -DHAVE_LOCALE
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
	  CFLAGS += -march=armv7-a
	else
	  CFLAGS += -march=armv7-a
	  # If gcc is 5.0 or later
	  ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
	    LDFLAGS += -static-libgcc -static-libstdc++
	  endif
	endif
	
# (armv8 a35, hard point, neon based) ###
# Playstation Classic
else ifeq ($(platform), classic_armv8_a35)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=link.T -Wl,--no-undefined
	CFLAGS += -Ofast \
	-flto=4 -fwhole-program -fuse-linker-plugin \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a35 -mfpu=neon-fp-armv8 -mfloat-abi=hard
	CXXFLAGS += $(CFLAGS)
	CPPFLAGS += $(CFLAGS)
	ASFLAGS += $(CFLAGS)
	HAVE_NEON = 1
	ARCH = arm
	BUILTIN_GPU = neon
	HAVE_VFS_FD = 0
    DEFINES += -std=c99 -D_GNU_SOURCE
    DEFINES += -DHAVE_LOCALE
    	CFLAGS += -march=armv8-a
	LDFLAGS += -static-libgcc -static-libstdc++
#######################################

# OS X
else ifeq ($(platform), osx)
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   OSXVER = `sw_vers -productVersion | cut -d. -f 2`
   OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
   fpic += -mmacosx-version-min=10.1
   ifndef ($(NOUNIVERSAL))
      CFLAGS += $(ARCHFLAGS)
      LDFLAGS += $(ARCHFLAGS)
   endif
   ifeq ($(arch),ppc)
      DEFINES += -D__POWERPC__ -D__PPC__ -DMSB_FIRST
   endif
   DEFINES += -std=gnu99

# iOS
else ifneq (,$(findstring ios,$(platform)))
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
   endif
   ifeq ($(platform),ios-arm64)
      CC = cc -arch arm64 -isysroot $(IOSSDK)
   else
      CC = cc -arch armv7 -isysroot $(IOSSDK)
   endif
   ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
      CC += -miphoneos-version-min=8.0
      PLATFORM_DEFINES := -miphoneos-version-min=8.0
   else
      CC += -miphoneos-version-min=5.0
      PLATFORM_DEFINES := -miphoneos-version-min=5.0
   endif
   DEFINES += -std=c99

# tvOS
else ifeq ($(platform), tvos-arm64)
   TARGET := $(TARGET_NAME)_libretro_tvos.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   CFLAGS := -DIOS
   DEFINES += -std=c99

ifeq ($(IOSSDK),)
   IOSSDK := $(shell xcodebuild -version -sdk appletvos Path)
endif

# Theos
else ifeq ($(platform), theos_ios)
   DEPLOYMENT_IOSVERSION = 5.0
   TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
   ARCHS = armv7 armv7s
   TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
   THEOS_BUILD_DIR := objs
   include $(THEOS)/makefiles/common.mk
   LIBRARY_NAME = $(TARGET_NAME)_libretro_ios
   DEFINES += -std=c99

# QNX
else ifeq ($(platform), qnx)
   TARGET := $(TARGET_NAME)_libretro_qnx.so
   fpic := -fPIC
   SHARED := -lcpp -lm -shared -Wl,-version-script=link.T
   CC = qcc -Vgcc_ntoarmv7le
   AR = QCC -Vgcc_ntoarmv7le
   PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -fexceptions -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp
   DEFINES += -Wc,-std=c99

# PS3
else ifneq (,$(filter $(platform), ps3 sncps3 psl1ght))
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   PLATFORM_DEFINES := -D__CELLOS_LV2__
   STATIC_LINKING = 1
   DEFINES += -std=gnu99 -fms-extensions
   HAVE_VFS_FD = 0

   # sncps3
   ifneq (,$(findstring sncps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe

   # PS3
   else ifneq (,$(findstring ps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
      AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe

   # Lightweight PS3 Homebrew SDK
   else ifneq (,$(findstring psl1ght,$(platform)))
      TARGET := $(TARGET_NAME)_libretro_$(platform).a
      CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
      AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   endif

# PS2
else ifeq ($(platform), ps2)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = ee-gcc$(EXE_EXT)
   AR = ee-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DPS2 -DCC_RESAMPLER
   CFLAGS += -G0 -DHAVE_NO_LANGEXTRA
   STATIC_LINKING = 1
   DEFINES += -std=c99
	HAVE_VFS_FD = 0

# PSP
else ifeq ($(platform), psp1)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = psp-gcc$(EXE_EXT)
   AR = psp-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DPSP -DCC_RESAMPLER
   CFLAGS += -G0 -I$(shell psp-config --pspsdk-path)/include
   STATIC_LINKING = 1
   DEFINES += -std=c99
	HAVE_VFS_FD = 0

# Vita
else ifeq ($(platform), vita)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = arm-vita-eabi-gcc$(EXE_EXT)
   AR = arm-vita-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DVITA -DCC_RESAMPLER -DPSP2
   STATIC_LINKING = 1
   DEFINES += -std=c99

# CTR(3DS)
else ifeq ($(platform), ctr)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
   AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES := -DARM11 -D_3DS
	 PLATFORM_DEFINES += -DHAVE_STRTOF_L -DHAVE_LOCALE -D_GNU_SOURCE

   CFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
   CFLAGS += -Wall -mword-relocations
   CFLAGS += -fomit-frame-pointer -ffast-math
   CFLAGS += -I$(CTRULIB)/include
   DEFINES += -std=c99

   PLATFORM_DEFINES += -DUSE_VFS_3DS
   STATIC_LINKING = 1

# Xbox 360
else ifeq ($(platform), xenon)
   TARGET := $(TARGET_NAME)_libretro_xenon360.a
   CC = xenon-gcc$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   PLATFORM_DEFINES := -D__LIBXENON__
   STATIC_LINKING = 1
   DEFINES += -std=c99
   HAVE_VFS_FD = 0

# Nintendo Game Cube / Wii / WiiU
else ifneq (,$(filter $(platform), ngc wii wiiu))
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DGEKKO -mcpu=750 -meabi -mhard-float -DHAVE_STRTOF_L
   PLATFORM_DEFINES += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -D_GNU_SOURCE
   STATIC_LINKING = 1
   DEFINES += -std=c99
   HAVE_VFS_FD = 0

   # Nintendo WiiU
   ifneq (,$(findstring wiiu,$(platform)))
      PLATFORM_DEFINES += -DWIIU -DHW_RVL -mwup

   # Nintendo Wii
   else ifneq (,$(findstring wii,$(platform)))
      PLATFORM_DEFINES += -DHW_RVL -mrvl

   # Nintendo Game Cube
   else ifneq (,$(findstring ngc,$(platform)))
      PLATFORM_DEFINES += -DHW_DOL -mrvl
   endif

	PLATFORM_DEFINES += -DHAVE_LOCALE

# Nintendo Switch (libnx)
else ifeq ($(platform), libnx)
	export DEPSDIR := $(CURDIR)/
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	include $(DEVKITPRO)/libnx/switch_rules
	STATIC_LINKING=1
	STATIC_LINKING_LINK=1
	HAVE_VFS_FD = 0
	CFLAGS += -O3 -fomit-frame-pointer -ffast-math -I$(LIBNX)/include/ -fPIE -Wl,--allow-multiple-definition -specs=$(LIBNX)/switch.specs
	DEFINES += -std=gnu11
	ASFLAGS += -DHAVE_LIBNX
	PLATFORM_DEFINES += -D__SWITCH__ -DHAVE_LIBNX -DHAVE_LOCALE
	PLATFORM_DEFINES += -march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE -mcpu=cortex-a57+crc+fp+simd -DHAVE_INTTYPES -DLSB_FIRST -DINLINE=inline

# Nintendo Switch (libtransistor)
else ifeq ($(platform), switch)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   include $(LIBTRANSISTOR_HOME)/libtransistor.mk
   STATIC_LINKING=1
   STATIC_LINKING_LINK=1
   HAVE_VFS_FD = 0
   CFLAGS += -fomit-frame-pointer -ffast-math
   DEFINES += -std=c99

# Genode
else ifeq ($(platform), genode)
   TARGET  := $(TARGET_NAME)_libretro.lib.so
   CC      := $(shell pkg-config genode-base --variable=cc)
   LD      := $(shell pkg-config genode-base --variable=ld)
   CFLAGS  += $(shell pkg-config --cflags genode-libc)
   LDFLAGS += -shared --version-script=link.T
   LDFLAGS += $(shell pkg-config --libs genode-lib genode-libc)
   LIBS =

# emscripten
else ifeq ($(platform), emscripten)
   TARGET := $(TARGET_NAME)_libretro_$(platform).bc
   DEFINES += -std=gnu99

# Windows
else
   TARGET := $(TARGET_NAME)_libretro.dll
   CC = gcc
   SHARED := -shared -static-libgcc -static-libstdc++ -Wl,-no-undefined -Wl,-version-script=link.T
   DEFINES += -std=c99

endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
else ifeq ($(platform), emscripten)
   CFLAGS += -O2
else
   CFLAGS += -O3
endif

DEFINES += -DHAVE_STRNDUP -DHAVE_STRDUP -DDISABLE_THREADING

include $(BUILD_DIR)/Makefile.common

OBJS := $(SOURCES_C:.c=.o) $(SOURCES_ASM:.S=.o)

DEFINES += $(PLATFORM_DEFINES) $(RETRODEFS)

CFLAGS += $(CODE_DEFINES) $(fpic) $(DEFINES)

%.o: %.c
	$(CC) -c -o $@ $< $(CFLAGS) $(INCLUDES)
%.o: %.S
	$(CC) -c -o $@ $< $(CFLAGS) $(INCLUDES)


ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS $(COMMON_DEFINES) $(INCLUDES) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_C)
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)

ifneq ($(platform),genode)
LD = $(CC)
endif

$(TARGET): $(OBJS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJS)
else
	$(LD) -o $@ $(SHARED) $(OBJS) $(LDFLAGS) $(LIBS)
endif

clean-objs:
	rm -f $(OBJS)

clean:
	rm -f $(OBJS)
	rm -f $(TARGET)

install:
	install -D -m 755 $(TARGET) $(DESTDIR)$(libdir)/$(LIBRETRO_DIR)/$(TARGET)

uninstall:
	rm $(DESTDIR)$(libdir)/$(LIBRETRO_DIR)/$(TARGET)

.PHONY: clean clean-objs install uninstall
endif

endif
