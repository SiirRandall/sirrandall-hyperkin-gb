From 1b8f6fc40d037492e67e48b1582d17bd07bfef64 Mon Sep 17 00:00:00 2001
From: Binyuan Lan <lby@rock-chips.com>
Date: Fri, 7 Jul 2017 15:38:12 +0800
Subject: [PATCH] waylandsink: let waylandsink work with qt

Signed-off-by: Binyuan Lan <lby@rock-chips.com>
---
 ext/wayland/gstwaylandsink.c | 8 ++++++--
 ext/wayland/wldisplay.c      | 3 +++
 ext/wayland/wldisplay.h      | 2 ++
 ext/wayland/wlwindow.c       | 5 ++++-
 4 files changed, 15 insertions(+), 3 deletions(-)
 mode change 100644 => 100755 ext/wayland/wldisplay.c

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 46a710f..f185a69 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -840,11 +840,11 @@ gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
     if (G_LIKELY (gst_wayland_sink_find_display (sink))) {
       /* we cannot use our own display with an external window handle */
       if (G_UNLIKELY (sink->display->own_display)) {
-        GST_ELEMENT_ERROR (sink, RESOURCE, OPEN_READ_WRITE,
+        /*GST_ELEMENT_ERROR (sink, RESOURCE, OPEN_READ_WRITE,
             ("Application did not provide a wayland display handle"),
             ("waylandsink cannot use an externally-supplied surface without "
                 "an externally-supplied display handle. Consider providing a "
-                "display handle from your application with GstContext"));
+                "display handle from your application with GstContext"));*/
       } else {
         sink->window = gst_wl_window_new_in_surface (sink->display, surface,
             &sink->render_lock);
@@ -863,6 +863,10 @@ gst_wayland_sink_set_render_rectangle (GstVideoOverlay * overlay,
     gint x, gint y, gint w, gint h)
 {
   GstWaylandSink *sink = GST_WAYLAND_SINK (overlay);
+  printf("waylandsink: window geometry changed to (%d, %d) %d x %d\n",
+		x, y, w, h);
+  video_display_width = w;
+  video_display_height = h;
 
   g_return_if_fail (sink != NULL);
 
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
old mode 100644
new mode 100755
index 39782bc..cf476d3
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -198,6 +198,9 @@ gst_wl_display_check_format_for_dmabuf (GstWlDisplay * display,
   if (!display->dmabuf)
     return FALSE;
 
+  /* XXX: fake, because the compositor does not yet advertise anything */
+  return TRUE;
+ 
   dmabuf_fmt = gst_video_format_to_wl_dmabuf_format (format);
   if (dmabuf_fmt == (guint) - 1)
     return FALSE;
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index 7c89212..7a09140 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -72,6 +72,8 @@ struct _GstWlDisplayClass
 {
   GObjectClass parent_class;
 };
+unsigned int video_display_width;
+unsigned int video_display_height;
 
 GType gst_wl_display_get_type (void);
 
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index d08ed87..300b508 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -177,7 +177,10 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   /* set the initial size to be the same as the reported video size */
   width =
       gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
-  gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
+    if(video_display_width != 0)
+	gst_wl_window_set_render_rectangle (window, 0, 0, video_display_width, video_display_height);
+  else
+	gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
 
   return window;
 }
-- 
1.9.1

